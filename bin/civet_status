#!/usr/bin/env python

# Copyright 2016 The Jackson Laboratory
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


#   report on the status of a pipeline.  The pipeline is specified by providing
#   the path to its log directory, which is unique for each pipeline


from __future__ import print_function

import argparse
import sys
import os
import inspect

cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile(inspect.currentframe()))[0]))
lib_folder = os.path.join(cmd_folder, '../lib')
if lib_folder not in sys.path:
     sys.path.insert(0, lib_folder)

import job_runner.common
import version
import status


def format_state(state):
    if state == 'R':
        return "Running"
    elif state == 'Q':
        return "Queued (eligible to run)"
    elif state == 'H':
        return "Queued (waiting on dependency)"
    elif state == 'W':
        return "Queued (with delayed start)"
    
    return state


def main():

    parser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]))
    parser.add_argument('-r', '--recursive', dest='recursive',
                        action='store_true', help="Run in recursive mode")
    parser.add_argument('--verbose', dest='verbose', action='store_true',
                        help="More verbose output")
    parser.add_argument('-q', '--quiet', dest='quiet', action='store_true',
                        help="Only produce output for failed runs")
    parser.add_argument('-v', '--version', dest='print_version', action='store_true',
                        help='Print Civet version and exit')
    parser.add_argument('dirs', help="Log directory", nargs=argparse.REMAINDER)
    parser.set_defaults(quiet=False)
    parser.set_defaults(verbose=False)

    # change default behavior to recursive, keep option to preserve backwards
    # compatibility
    parser.set_defaults(recursive=True)
    args = parser.parse_args()

    verbose = args.verbose
    quiet = args.quiet

    job_manager = status.PipelineStatus.get_job_manager()

    if args.print_version:
        version.print_version_string_and_exit()
    
    if verbose and quiet:
        print("--quiet (-q) and --verbose options are mutually exclusive\n", file=sys.stderr)
        return 1
    
    dir_list_arg = []

    if len(args.dirs) > 0:
        dir_list_arg = args.dirs
    else:
        dir_list_arg.append('.')

    if args.recursive:
        all_log_dirs = []
        followed_dirs = set()
        for d in dir_list_arg:
            log_dirs = []
            for root, dirs, files in os.walk(d, topdown=True, followlinks=True):
                followed_dirs.add(os.path.realpath(root))
                if job_runner.common.BATCH_ID_LOG in files:
                    log_dirs.append(root)

                # make sure we don't follow any symlinks that point to a dir
                # we've already processed
                for dir in dirs:
                    if os.path.realpath(os.path.join(root, dir)) in followed_dirs:
                        dirs.remove(dir)

            log_dirs.sort()
            all_log_dirs += log_dirs

        if len(all_log_dirs) == 0:
            print("ERROR: no valid log directory found!\n", file=sys.stderr)
            return 1
    else:
        all_log_dirs = dir_list_arg


    for log_dir in all_log_dirs:
    
        log_dir = os.path.abspath(log_dir)
        run_canceled = False
    
        if verbose:
            print("\n\nGetting status for pipeline with log directory at:")
            print("\t{0}".format(log_dir))
    

        try:
            dir_status = status.PipelineStatus(log_dir, job_manager)
        except ValueError as e:
            print(e, file=sys.stderr)
            continue

        if dir_status.status == "SUBMIT_ERROR":
            print("{0}: Pipeline submission error".format(log_dir), file=sys.stderr)
            continue
    
        # check to see if the log directory was created with civet_run --no-submit
        if dir_status.status == "NO_SUB":
            print(log_dir + ":\n\tThis pipeline was run with --no-submit, so no status is applicable.")
            continue

        if dir_status.aborted and verbose:
            print("WARNING: Pipeline aborted due to non-zero exit value of at least one job.  Details below.\n")

        if dir_status.status == "CANCELED":
            run_canceled = True
            if verbose and dir_status.cancel_message:
                print(dir_status.cancel_message)



        for job in dir_status.jobs:
            if verbose:
                print("\n{0} ({1}):".format(job.name, job.id))

                if job.state == "CANCELED":
                    print("\tJob canceled (state at cancel = {0})".format(format_state(job.state_at_cancel)))

                elif "FAILED" in job.state:
                    if job.exit_status == -11:
                        print("\tJob failed (Walltime)")
                    elif job.exit_status < 0:
                        print("\tJob failed (batch error)")
                    else:
                        print("\tFinished=Failure")
                    print("\tExit Status={0}".format(job.exit_status))

                elif job.state == "SUCCESS":
                    print("\tFinished=Success")

                elif job.state == "DELETED":
                    if dir_status.aborted:
                        print("\tpbs_server returned no information for job {0} (job aborted)".format(job.name))
                    elif run_canceled:
                        print("\tpbs_server returned no information for job {0} (pipeline canceled by user)".format(job.name))
                    else:
                        print("\tWARNING=pbs_server returned no information for job {0}.  Job may have been deleted or it may have crashed.".format(job.name))

                else:
                    print("\t" + status.format_state(job.state))


                if job.walltime is not None:
                    print("\tWalltime={0}".format(job.walltime))

                if job.walltime_requested is not None:
                    print("\tWalltime(Requested)={0}".format(job.walltime_requested))

                if job.state == 'H':
                    print("\tDepends on {}".format(job.dependencies))


        if verbose:
            print("\nSummary:")
        elif not quiet or dir_status.status == 'FAILED' or dir_status.status == 'CANCELED' or 'TERMINATED' in dir_status.status:
            print("{0}: {1}".format(log_dir, dir_status.status))
            
        if verbose or (not quiet and dir_status.complete_jobs_success != dir_status.total_jobs):
            print("\tTotal Pipeline Jobs: {0}".format(dir_status.total_jobs))
            print("\t\tCompleted Jobs (success): {0}".format(dir_status.complete_jobs_success))
            print("\t\tCompleted Jobs (with error): {0}".format(dir_status.complete_jobs_failure))
            print("\t\tRunning Jobs: {0}".format(dir_status.running_jobs))
            print("\t\tPending Jobs (waiting for compute resources): {0}".format(dir_status.queued_jobs))
            print("\t\tPending Jobs (waiting on dependency): {0}".format(dir_status.held_jobs))
            if dir_status.delayed_jobs:
                print("\t\tPending Jobs (delayed start): {0}".format(dir_status.delayed_jobs))
            if dir_status.canceled_jobs:
                print("\t\tCanceled Jobs: {0}".format(dir_status.canceled_jobs))
            if dir_status.deleted_jobs:
                #now that a status.txt file should get created for any job that
                #runs, if we have any "unknown" jobs then it means they were
                #probably deleted (qdel), other possibility is there was a
                #node crash that took out the job
                print("\t\tDeleted Jobs: {0}".format(dir_status.deleted_jobs))
        if verbose:
            print("\n\n")

if __name__ == '__main__':
    main()
