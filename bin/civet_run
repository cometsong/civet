#!/usr/bin/env python

# Copyright (C) 2016  The Jackson Laboratory
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#civet pipeline driver program

from __future__ import print_function

import argparse
import sys
import inspect
import os

cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile(inspect.currentframe()))[0]))
lib_folder = os.path.join(cmd_folder, '../lib')
if lib_folder not in sys.path:
    sys.path.insert(0, lib_folder)

import civet_exceptions
import pipeline_parse as PL
import version
import utilities



def main():

    utilities.cleanup_command_line()

    version.parse_options()
    
    parser = argparse.ArgumentParser()
    parser.add_argument('-q', '--queue', default=None, help="submission queue [default = TORQUE default]")
    parser.add_argument('-n', '--no-submit', dest='submit', action='store_false', help="Generate batch scripts but don't submit them")
    parser.add_argument('-o', '--option-file', dest='option_file', default=None, help="option override file")
    parser.add_argument('-t', '--keep-temp', dest='keep_temp', action='store_true', help="Don't delete temporary pipeline files")
    parser.add_argument('--hold', dest='release_jobs', action='store_false', help="Jobs will be held after pipeline submission")
    parser.add_argument('-f', '--force-conditional', dest='force_conditional', action='store_true', help="Force conditional steps to run")
    parser.add_argument('-d', '--delay', dest='delay', default=None, help="job delay")
    parser.add_argument('-e', '--email-address', dest='email_address', default=None, help="email address for notifications, defaults to user. Can be a comma delimited list of addresses.")
    parser.add_argument('--error-email-address', dest='error_email_address', default=None, help="email address for error emails, defaults to '--email-address' value")
    parser.add_argument('--walltime-multiplier', dest='walltime_multiplier', type=float, default=None, help="optional walltime multiplier to be applied to every job's walltime")
    parser.add_argument('pipeline', help="pipeline XML definition", nargs=1)
    parser.add_argument('pipeline_args', help="pipeline arguments", nargs=argparse.REMAINDER)
    parser.set_defaults(submit=True)
    parser.set_defaults(keep_temp=False)
    parser.set_defaults(release_jobs=True)
    parser.set_defaults(force_conditional=False)
    args = parser.parse_args()
    

    try:
        PL.parse_XML(args.pipeline[0], args.pipeline_args, skip_validation=True,
                     queue=args.queue, submit_jobs=args.submit,
                     search_path=os.environ.get('CIVET_PATH'),
                     user_override_file=args.option_file,
                     keep_temp=args.keep_temp, release_jobs=args.release_jobs,
                     force_conditional_steps=args.force_conditional,
                     delay=args.delay, email_address=args.email_address,
                     error_email_address=args.error_email_address,
                     walltime_multiplier=args.walltime_multiplier)
    except civet_exceptions.ParseError as e:
        print("\nError parsing XML:  {}".format(e), file=sys.stderr)
        sys.exit(1)
    PL.submit()

if __name__ == "__main__":
    main()
