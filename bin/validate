#!/usr/bin/env python
#
# Command line interface to the validity capabilities. Four uses:
#  1. Create a "golden images" (master) file, given a list of files
#  2. Add to an existing master file.
#  3. Update an existing master file.
#  4. Validate a list of files against the master.
#

import argparse
import sys
import os
import inspect

cmd_folder = os.path.realpath(os.path.abspath(os.path.split(
                              inspect.getfile( inspect.currentframe() ))[0]))
lib_folder = os.path.join(cmd_folder, '../lib')
if lib_folder not in sys.path:
     sys.path.insert(0, lib_folder)

import validity

def process_options():

    master = os.path.join(cmd_folder, '../data/master_file_list')

    parser = argparse.ArgumentParser('Validate files', 
        epilog='--generate overrides --add and --update; '
               '--add overrides --update')
    parser.add_argument('-a', '--add', dest='add', action='store_true',
        default=False, help='Add file info to an existing master list.')
    parser.add_argument('-g', '--generate', dest='gen', action='store_true',
        default=False, help='Generate a file containing info about the '
                            'current state of the files.')
    parser.add_argument('-m', '--master-list', dest='master_list',
                        default=master,
                        help='Specify an alternate file when creating '
                             'or modifying the master list.')
    parser.add_argument('-u', '--update', dest='update', action='store_true',
        default=False, help='Update master list, replacing current info.')
    parser.add_argument('files', metavar='F', type=str, nargs='+',
                        help='List of files to validate.')
    args = parser.parse_args()
    if not args.gen and not args.add and not args.update:
        if args.master_list != master:
            print >> sys.stderr, ('Option --master list only available when '
                'generating or modifying the master list. Ignoring.')
            args.master_list = master
    if args.gen and (args.add or args.update):
        args.add = False
        arts.update = False
        print >> sys.stderr, ('--generate is incompatible with --add and --update.\n'
                              'using --generate')
    if args.add and args.update:
        arts.update = False
        print >> sys.stderr, ('--add is incompatible with --update.\n'
                              'using --add')

    return args

def ensure_directory_exists(dir):
    try:
        if not os.path.exists(dir):
            os.mkdir(dir)
    except:
        print >> sys.stderr, 'Could not create directory', dir, '\nExiting...'
        sys.exit(1)
    
def main():
    args = process_options()

    files = validity.FileCollection()
    for fn in args.files:
        files.add_file(fn)

    if args.gen:
        #Generate list.
        f = args.master_list
        dir = os.path.split(args.master_list)[0]
        # If the master list path is just a file, directory is empty.
        if dir:
            ensure_directory_exists(dir)
        files.to_JSON_file(args.master_list)
    else:
        # We're going to do something requiring us to read the master list.
        # Go ahead and do it.
        if not os.path.exists(args.master_list):
            if not (args.add or args.update):
                print >> sys.stderr, 'Validation failure:',
            print >> sys.stderr, ('master file list ' +
                args.master_list + ' does not exist.')
            sys.exit(2)

        m = validity.FileCollection()
        m.from_JSON_file(args.master_list)

        if args.add or args.update:
            # merge doesn't change existing entries unless update==True
            m.merge(files, args.update)
            m.to_JSON_file(args.master_list)
        else:
            # Validate files.
            validation_failures = files.validate(m)
            if validation_failures:
                print >> sys.stderr, validation_failures
                sys.exit(1)
    sys.exit(0)

main()
