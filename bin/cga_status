#!/usr/bin/env python

"""
   report on the status of a pipeline.  The pipeline is specified by providing
   the path to its log directory, which is unique for each pipeline
"""

import argparse
import sys
import os
import inspect

cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))
lib_folder = os.path.join(cmd_folder, '../lib')
if lib_folder not in sys.path:
     sys.path.insert(0, lib_folder)

import job_runner.torque as batch_system
import job_runner.common



def main():

    parser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]))
    parser.add_argument('log_dir', help="Path to pipeline log directory")
    args = parser.parse_args()

    log_dir = args.log_dir
    
    if not os.path.isdir(log_dir):
        sys.stderr.write("ERROR: {0} does not appear to be a valid pipeline log directory.\n".format(log_dir))
        return 1
    
    jm = batch_system.JobManager()
    
    # get listing of batch jobs from the pipeline's log directory
    # each line in batch_jobs is [batch_id, job_name, [dependencies]])
    try:
        batch_jobs = job_runner.common.jobs_from_logdir(log_dir)
    except IOError, e:
        sys.stderr.write("ERROR: {0} does not appear to be a valid pipeline log directory.\n".format(log_dir))
        sys.stderr.write(e + "\n")
        return 1
    
    print "\n\nGetting status for pipeline with log directory at:"
    print "\t{0}\n".format(log_dir)
    
    # check for the abort.log -- this will indicate something went wrong with
    # the run
    if os.path.exists(os.path.join(log_dir, "abort.log")):
        print "Warning: Pipeline aborted due to non-zero exit value of at least one job.  Details below.\n"
    
    complete_jobs = 0
    running_jobs = 0
    pending_jobs = 0
    unknown_state = 0
    total_jobs = len(batch_jobs)
    
    for job in batch_jobs:
        print "\n{0} ({1}):".format(job[1], job[0])
        if os.path.exists(os.path.join(log_dir, job[1] + job_runner.common.JOB_STATUS_SUFFIX)): 
            status = job_runner.common.get_status_from_file(log_dir, job[1])
            if 'cancelled' in status:
                print "\tJob cancelled (state at cancel = {0})".format(status['state_at_cancel'])
            if 'exit_status' in status:
                if status['exit_status'] == '0':
                    print "\tFinished=Success"
                else:
                    print "\tFinished=Failure"
                print "\tExit Status={0}".format(status['exit_status'])
            if 'walltime' in status:
                print "\tWalltime={0}".format(status['walltime'])
            if 'requested_walltime' in status:
                print "\tWalltime(Requested)={0}".format(status['requested_walltime'])
            complete_jobs += 1
        else:
            status = jm.query_job(job[0])
            if status:
                print "\tState={0}".format(status.state)
                if status.state == 'R' or status.state == 'C':
                    if status.state == 'R':
                        running_jobs += 1
                    else:
                        # if we got here the job is in state "C" but no 
                        # job_name-status.txt file was created.  Job must have 
                        # crashed or was cancelled...
                        complete_jobs += 1
                        if status.exit_status == "0":
                            print "\tFinished=Success"
                        else:
                            print "\tFinished=Failure"
                    print "\tExit Status={0}".format(status.exit_status)
                    print "\tWalltime={0}".format(status.walltime)
                    print "\tWalltime(Requested)={0}".format(status.requested_walltime)
                elif status.state == 'H':
                    print "\tWalltime(Requested)={0}".format(status.requested_walltime)
                    print "\tDepends on {0}".format(job[2])
                    pending_jobs += 1
            else:
                print "\tWARNING=pbs_server returned no information for job {0}.  Job may have been deleted or it may have crashed.".format(job[0])
                unknown_state += 1
                
    print "\n\nSummary: "
    print "Total Pipeline Jobs: {0}".format(total_jobs)
    print "\tCompleted Jobs: {0}".format(complete_jobs)
    print "\tRunning Jobs: {0}".format(running_jobs)
    print "\tPending Jobs: {0}".format(pending_jobs)
    if unknown_state:
        print "\t{0} deleted or crashed jobs (status file not found and no record for job on pbs_server)".format(unknown_state)

if __name__ == '__main__':
    main()
