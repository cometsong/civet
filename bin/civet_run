#!/usr/bin/env python

#civet pipeline driver program

import argparse
import sys
import inspect
import os

cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))
lib_folder = os.path.join(cmd_folder, '../lib')
if lib_folder not in sys.path:
     sys.path.insert(0, lib_folder)


import pipeline_parse as PL
import version


def main():
    version.parse_options()
    
    parser = argparse.ArgumentParser()
    parser.add_argument('-q', '--queue', default=None, help="submission queue [default = TORQUE default]")
    parser.add_argument('-n', '--no-submit', dest='submit', action='store_false', help="Generate batch scripts but don't submit them")
    parser.add_argument('-o', '--option-file', dest="option_file", default=None, help="option override file")
    parser.add_argument('-t', '--keep-temp', dest='keep_temp', default=False, help="Don't delete temporary pipeline files")
    parser.add_argument("pipeline", help="pipeline XML definition", nargs=1)
    parser.add_argument("pipeline_args", help="pipeline arguments", nargs=argparse.REMAINDER)
    parser.set_defaults(submit=True)
    args = parser.parse_args()
    
    # The name of the pipeline description is passed on the command line.
    #
    if len(sys.argv) < 2:
        sys.stderr.write( 'civet_run requires at least one argument (the xml '
                          'pipeline description), any additional parameters are '
                          'passed to the pipeline.\n\n')
        sys.exit(1)

    PL.parse_XML(args.pipeline[0], args.pipeline_args, skip_validation=True, queue=args.queue, submit_jobs=args.submit, search_path=os.environ.get('CIVET_PATH'), user_override_file=args.option_file, keep_temp=args.keep_temp)
    PL.submit()

if __name__ == "__main__":
    main()
