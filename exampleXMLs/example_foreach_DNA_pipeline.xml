<?xml version="1.0"?>
<!--
	SAMPLE CGA Pipeline definition, based very loosely on Anuj's DNASEQ
	recommendations.

	This file is ONLY intended to show the features of the XML and in
	no way represents a real pipeline with reasonable filenames, 
	tool parameters, etc.
-->

<!--
	Outer level is the pipeline itself
-->

<pipeline name="Directory of DNASEQ Paired End">
	<!--
		First, define the input files for the pipeline. A directory of 
        paired fastq's specified
		on the command line, and a reference file in a fixed location.
	<input id="end1_fq"   type="fastq" parameter="1" />
	<input id="end2_fq"   type="fastq" parameter="2" />
	-->
    <inputdir id="indir" parameter="1" />
	<input id="reference" type="fasta" filespec="/hpcdata/shared/mm9.fa" />
	
	<!--
		Any tool output files that use relative naming will be dropped
		in a directory specified as the second parameter on the command
		line.
	-->
	<outputdir id="outdir" parameter="2" />
    <foreach dir="indir">
        <!--
            Specify our output files that we want to hang around after the run.
            Note that these are relative, so they will be placed in the output
            directory specified above.
        -->
        <!--
            NOTE: the processing of all identified files in a directory
            may happen in parallel.  Thus the processing of each set of files
            must be completely independent of every other set of files
            that will be processed by this foreach.
        -->
        <!--
            We'll process the files in this directory by looking for all the
            files matching the glob pattern *_R1_*.fastq. We'll identify
            the other input and output files via regex's on this filename.
        -->

        <file id="end1" pattern=".*_R1_.*fastq" />

        <!--
            Now identify the related files.
        -->
        <related id="end2" inout="in"
            pattern="(.*)_R1_(.*fastq)"
            replace="\1_R2_\2" />
        <related id="end1_fq_qc" inout="out"
            pattern="(.*)\.fastq"
            replace="\1_qc.fastq" />
        <related id="end2_fq_qc" inout="out"
            pattern="(.*)_R1_(.*)\.fastq"
            replace="\1_R2_\2_qc.fastq" />
        <related id="bam" inout="out"
            pattern="(.*)_R1_(.*)fastq"
            replace="\1_\2bam" />        
        
        <!--
            Steps are simply logical phases of the pipeline.  A pipeline step
            may be implemented in one or many OS processes.
            
            The first step in the pipeline is to run QC.  No, this doesn't
            really reflect the calling sequence for Glen's pipeline.  I'm
            making it up.
        -->
        <!--
            FIXME!!
            Temporarily disable the QC step for framework testing because I 
            don't have the required XML coded for it yet.
        <step name="QC">		
                Note about the output line below: end1_fq_qc and end2_fq_qc
                will be materialized as the full file path.  We include
                the ID outdir because the QC tool we're invoking will create
                various analysis statistics files and drop them in a
                directory (specified by the ID outdir).  Since they aren't
                used as input in a later stage, the statistics files don't
                need IDs of their own.
                
                The actual invocation of the QC tool is described in
                glen_qc_tool.xml, not in this file.
            <tool name="Glen's Wonder QC Pipeline"
                input="end1_fq,end2_fq"
                output="end1_fq_qc,end2_fq_qc,outdir"
                description="glen_qc_tool.xml" />
        </process>
        -->
        
        <!--
            Steps are invoked in lexical order.  So the Alignment step
            will run after the QC process completes.
            
            There is an opportunity here for optimization by file dependency
            tracking.  We could conceivably run a process as soon as its input
            files are ready.  Probably will NOT DO this in the first release.
        -->

        <step name="Alignment">
            <!--
                An alignment process built using bwa.
            -->
            <tool name="BWA Align to BAM"
                input="end1_fq_qc,end2_fq_qc,reference"
                output="bam"
                description="bwa_to_bam.xml" />
        </step>
    </foreach>
</pipeline>
