<?xml version="1.0"?>
<!--
	SAMPLE CGA Pipeline definition, based very loosely on Anuj's DNASEQ
	recommendations.

	This file is ONLY intended to show the features of the XML and in
	no way represents a real pipeline with reasonable filenames, 
	tool parameters, etc.
-->

<!--
	Outer level is the pipeline itself
-->

<pipeline name="DNASEQ Paired End">
	<!--
		First, define the input files for the pipeline. Two fastq's specified
		on the command line, and a reference file in a fixed location.
	-->
	<input id="end1_fq"   type="fastq" parameter="1" />
	<input id="end2_fq"   type="fastq" parameter="2" />
	<input id="reference" type="fasta" filespec="/hpcdata/shared/mm9.fa" />
	
	<!--
		Any tool output files that use relative naming will be dropped
		in a directory specified as the third parameter on the command
		line.
	-->
	<outputdir id="outdir" parameter="3" />

	<!--
		Specify our output files that we want to hand around after the run.
		Note that these are relative, so they will be placed in the output
		directory specified above.
	-->
	<output id="end1_fq_qc" type="fastq" filespec="cleaned_end_1.fq" />
	<output id="end2_fq_qc" type="fastq" filespec="cleaned_end_2.fq" />
	<output id="bam"        type="bam"   filespec="sorted.bam" />
	
	<!--
		Processes are simply logical steps in the pipeline, and should not
		be confused with operating system processes.  A pipeline process
		may be implemented in one or many OS processes. (Maybe I should
		rename this tag?)
		
		The first step in the pipeline is to run QC.  No, this doesn't
		really reflect the calling sequence for Glen's pipeline.  I'm
		making it up.
	-->
	<process name="QC">
		<!--
			The input and output specifications in a process constitute
			the "contract" with the rest of the pipeline.  If a user
			(researcher) wants to substitute another (set of) tool(s)
			in a process, the inputs and outputs of the overall process
			must stay the same.  This may involve invoking other tools
			to perform file conversions.
		-->
		<input id="end1_fq" type="fastq" />
		<input id="end2_fq" type="fastq" />
		<output id="end1_fq_qc" type="fastq" />
		<output id="end2_fq_qc" type="fastq" />
		
		<!-- 
			Note about the output line below: end1_fq_qc and end2_fq_qc
			will be materialized as the full file path.  We include
			the ID outdir because the QC tool we're invoking will create
			various analysis statistics files and drop them in a
			directory (specified by the ID outdir).  Since they aren't
			used as input in a later stage, the statistics files don't
			need IDs of their own.
			
			The actual invocation of the QC tool is described in
			glen_qc_tool.xml, not in this file.
		-->
		<tool name="Glen's Wonder QC Pipeline"
			input="end1_fq,end2_fq"
			output="end1_fq_qc,end2_fq_qc,outdir"
			description="glen_qc_tool.xml" />
	</process>
	
	<!--
		Processes are invoked in lexical order.  So the Alignment process
		will run after the QC process completes.
		
		There is an opportunity here for optimization by file dependency
		tracking.  We could conceivably run a process as soon as its input
		files are ready.  Probably will NOT DO this in the first release.
	-->

	<process name="Alignment">
		<!--
			An alignment process built using bwa.
		-->
		<input  id="end1_fq_qc" type="fastq" />
		<input  id="end2_fq_qc" type="fastq" />
		<input  id="reference"  type="fasta" />
		<output id="bam"        type="bam" />
		
		<tool name="BWA Align to BAM"
			input="end1_fq_qc,end2_fq_qc,reference"
			output="bam"
			description="bwa_to_bam.xml" />
	</process>
</pipeline>